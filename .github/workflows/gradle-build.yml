name: Gradle - Build

on:
  workflow_call:
    inputs:
      raw_version:
        description: "Project version without modification"
        required: true
        type: string
      java_version:
        description: "Java version to use"
        required: true
        type: string
      java_dist:
        description: "Java distribution to use"
        required: true
        type: string
    outputs:
      cache-key:
        description: "Key of the build files cache"
        value: ${{ jobs.generate_cache_keys.outputs.build }}
    secrets:
      codecov_token:
        required: true
        description: CodeCov token

jobs:
  generate_cache_keys:
    name: Generate cache keys
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.build_key.outputs.key }}
      ut: ${{ steps.unit_test_key.outputs.key }}
    steps:
      -
        name: Generate build key
        id: build_key
        run: |
          KEY=${{ inputs.raw_version }}-artifacts-${{ github.run_id }}
          echo "::set-output name=key::$KEY"

      - name: Generate Unit Test key
        id: unit_test_key
        run: |
          KEY=${{ inputs.raw_version }}-build_results-${{ github.run_id }}
          echo "::set-output name=key::$KEY"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: generate_cache_keys
    outputs:
      build-cache-key: ${{ steps.get_version.outputs.raw_project_version }}

    steps:
      -
        name: Checkout sourcecode
        uses: actions/checkout@v2

      -
        name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: ${{ inputs.java_version }}
          distribution: ${{ inputs.java_dist }}

      -
        name: Gradle - Prepare build
        uses: gradle/gradle-build-action@v2

      -
        name: Gradle - Build
        run: gradle build

      -
        name: Caching test files
        uses: actions/cache@v2
        if: always()
        with:
          path: |
            ./build/test-results/
          key: ${{ needs.generate_cache_keys.outputs.ut }}

      -
        name: Caching files
        uses: actions/cache@v2
        with:
          path: |
            ./build/libs/bouchon-${{ inputs.raw_version }}.jar
          key: ${{ needs.generate_cache_keys.outputs.build }}

  unit_test_results:
    name: Generate Unit Tests report
    runs-on: ubuntu-latest
    needs: [generate_cache_keys, build]
    steps:
      -
        name: Create file structure for cache
        run: |
          mkdir -p build/test-results

      -
        name: Get cached test files
        uses: actions/cache@v2
        if: always()
        with:
          path: |
            ./build/test-results/
          key: ${{ needs.generate_cache_keys.outputs.ut }}

      -
        name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: ./build/test-results/junit/**/*.xml

  code_coverage_report:
    name: Generate code coverage report
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      -
        name: Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.codecov_token }}
          flags: build

plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'com.palantir.docker' version '0.26.0'
	id 'jacoco'
}

sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	all {
		exclude group: 'org.springframework.boot', module:'spring-boot-starter-logging'
	}
}

repositories {
	mavenCentral()
}

ext['log4j2.version'] = '2.17.1'

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.yaml:snakeyaml:1.29'
	implementation 'commons-io:commons-io:2.11.0'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'

	// Tests
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testImplementation 'org.junit.jupiter:junit-jupiter-params'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
	testRuntimeOnly 'org.mockito:mockito-inline'

	implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
}


String imageName = "coutcout/bouchon:$version"
docker{
	name imageName
	files "build/libs/${bootJar.archiveFileName.get()}"
	buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

test {
	useJUnitPlatform()
	finalizedBy(jacocoTestReport)
	reports {
		junitXml.destination(file(getBuildDir().toString() + File.separator + "test-results" + File.separator + "junit"))
		html.destination(file(getBuildDir().toString() + File.separator + "test-results" + File.separator + "junit"))
	}
}

jacocoTestReport{
	dependsOn(test)
	reports{
		html.enabled(true)
		xml.enabled(true)
		xml.destination(file(getBuildDir().toString() + File.separator + "test-results" + File.separator + "jacoco" + File.separator + "coverage.xml"))
		html.destination(file(getBuildDir().toString() + File.separator + "test-results" + File.separator + "jacoco" + File.separator + "html"))
	}
}

task(printVersion) {
	doLast {
		logger.quiet(version)
	}
}

task(setVersion){
	doLast {
		def versionPattern = ~/\d+?\.\d+?\.\d+?(-SNAPSHOT)?/
		if(versionPattern.matcher(newVersion)){
			ant.propertyfile(file: "gradle.properties") {
				entry(key: "version", value: newVersion)
			}
		} else {
			throw new InvalidUserDataException("Invalid version format")
		}
	}
}

task(incrementVersion){
	doLast {
		def major = 0
		def minor = 0
		def patch = 0
		def snapshot = project.hasProperty("isRelease")  ? "" : "-SNAPSHOT"

		(version =~ /(\d+?)\.(\d+?)\.(\d+?)(-SNAPSHOT)?/).each { versionMatch, majorMatch, minorMatch, patchMatch, snapshotMatch ->
			major = majorMatch
			minor = minorMatch
			patch = patchMatch
		}

		if(major && minor && patch){
			switch (increment){
				case "major":
					logger.info("Major version incremented")
					major++
					break
				case "minor":
					logger.info("Minor version incremented")
					minor++
					break
				case "patch":
					logger.info("Patch version incremented")
					patch++
					break
				default:
					throw new InvalidUserDataException("Invalid version group to increment")
			}

			def newVersion = major + "." + minor + "." + patch + snapshot
			logger.info("New version:" + newVersion)
			ant.propertyfile(file: "gradle.properties") {
				entry(key: "version", value: newVersion)
			}
		}
	}
}



